{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","for","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","placeholder","newtext","toUpperCase","showAlert","newtext2","toLowerCase","newtext3","replace","document","querySelector","select","execCommand","newtext4","trim","split","length","defaultProps","abouttext","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","Mode","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","setInterval","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.8db27a0c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link> */}\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"/navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link> */}\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.abouttext}\r\n                </Link>\r\n              </li> */}\r\n            </ul>\r\n            <form className=\"d-flex\">\r\n              {/* <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button> */}\r\n              <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\"\r\n              onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    abouttext:PropTypes.string.isRequired\r\n} \r\n// it confirms that these two will be passed as string always but if they are passed as number or any other than it will show an error\r\n//if is is written is required than it is mandatory otherwise it will through an error if you are not passing any value and not giving any default props\r\nNavbar.defaultProps={\r\n    title:'Set title here',\r\n    abouttext:'About text here'\r\n};\r\n// if we are passing props than ok but if we are not passing anything than use these default values at there place","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick=()=>{\r\n    // console.log(\"Uppercase was clicked\"+t ext);\r\n    let newtext=text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to UpperCase\",\"success\");\r\n  }\r\n  const handleClear=()=>{\r\n    let newtext3=text.replace(text,'');\r\n    // string.replace('textToReplace', '');\r\n    setText(newtext3);\r\n    props.showAlert(\"Text Area is Cleared\",\"success\");\r\n  }\r\n  const handleDownClick=()=>{\r\n    // console.log(\"Uppercase was clicked\"+t ext);\r\n    let newtext2=text.toLowerCase();\r\n    setText(newtext2);\r\n    props.showAlert(\"Converted to LowerCase\",\"success\");\r\n  }\r\n  const handleOnChange=(event)=>{\r\n    console.log(\"On Change\");\r\n    setText(event.target.value);  //without writing this line you want be able to edit the text written inside the box as the value of 'text' will not change but by using this line you are simultaneouly updating the text using settext so you can update it\r\n  }\r\n  const handleCopy=()=>{\r\n    // let copyText=document.getElementsByClassName('form-control');\r\n    // copyText.select();\r\n    // navigator.clipboard.writeText(copyText.value);\r\n    const area = document.querySelector('#myBox')\r\n    area.select();\r\n    document.execCommand('copy')\r\n    props.showAlert(\"Copied to Clipboard\",\"success\");\r\n  }\r\n  const handleExtraspaces=()=>{\r\n    const newtext4=text.replace(/\\s{2,}/g, ' ').trim();\r\n    setText(newtext4);\r\n    props.showAlert(\"Extra Spaces removed\",\"success\");\r\n  }\r\n  \r\n  const [text,setText]=useState('');\r\n  // const [text,setText]=useState('Enter text here');\r\n  // text=\"new text\"; // wrong way to change the state\r\n  // setText(\"new text\");\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={ {backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\" placeholder='Enter text here' ></textarea>\r\n        </div>\r\n        <button className='btn btn-primary mx-2' onClick={handleUpClick}>Convert to UpperCase</button>\r\n        <button className='btn btn-warning mx-2' onClick={handleDownClick} >Convert to Lowercase</button>\r\n        <button className='btn btn-danger mx-2' onClick={handleClear} >Clear</button>\r\n        <button className='btn btn-success mx-2' onClick={handleCopy} >Copy Text</button>\r\n        <button className='btn btn-primary mx-2' onClick={handleExtraspaces} >Remove Spaces</button>\r\n\r\n    </div>\r\n    <div className=\"container my-3 \" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n      <h1>Your text summary</h1>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{0.008*text.split(\" \").length} Minutes reading time</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n       \r\n    </div>\r\n    </>\r\n  )\r\n}\r\n ","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        // const lower=word.toLowerCase();\r\n        const lower=word;\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState(\"light\"); // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  const toggleMode = () => {\n    if (Mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtil-DarkMode\";\n      setInterval(() => {\n        document.title = \"TextUtil-Home\";\n      }, 2000);\n      // setInterval(() => {\n      //   document.title='TextUtil is amazing';\n      // }, 500);\n      // if you will use 2 set intervals simultaneously than it will change infinitely and will be converted to one another\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtil-LightMode\";\n      setInterval(() => {\n        document.title = \"TextUtil-Home\";\n      }, 2000);\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar\n          title=\"TextUtils\"\n          abouttext=\"About\"\n          mode={Mode}\n          toggleMode={toggleMode}\n        />\n        {/* <Navbar /> */}\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* <Route exact path=\"/about\"> */}\n              {/* <About /> */}\n            {/* </Route> */}\n            {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={Mode}/>\n\n            {/* </Route> */}\n          {/* </Switch> */}\n          {/* <About /> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}